// <auto-generated />
using System;
using Ekklesia.Data.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Ekklesia.Data.Migrations
{
    [DbContext(typeof(EkklesiaContext))]
    [Migration("20191026133023_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Ekklesia.Models.Activity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("ActivityDate");

                    b.Property<int>("ActivityTypeId");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<DateTime>("InsertDate");

                    b.Property<int>("InsertUserId");

                    b.Property<int?>("TenantId");

                    b.Property<DateTime?>("UpdateDate");

                    b.Property<int?>("UpdateUserId");

                    b.HasKey("Id");

                    b.HasIndex("ActivityTypeId");

                    b.ToTable("Activity");
                });

            modelBuilder.Entity("Ekklesia.Models.ActivityAssistant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ActivityId");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<int?>("ContactId");

                    b.Property<int>("EntityTypeId");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.HasIndex("ContactId");

                    b.HasIndex("EntityTypeId");

                    b.ToTable("ActivityAssistant");
                });

            modelBuilder.Entity("Ekklesia.Models.ActivityType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Alias")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("Description")
                        .HasMaxLength(100);

                    b.Property<DateTime>("InsertDate");

                    b.Property<int>("InsertUserId");

                    b.Property<bool>("IsActive");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<int?>("TenantId");

                    b.Property<DateTime?>("UpdateDate");

                    b.Property<int?>("UpdateUserId");

                    b.HasKey("Id");

                    b.ToTable("ActivityType","Configuration");
                });

            modelBuilder.Entity("Ekklesia.Models.Asset", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Alias")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("Description")
                        .HasMaxLength(100);

                    b.Property<DateTime>("InsertDate");

                    b.Property<int>("InsertUserId");

                    b.Property<bool>("IsActive");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<int?>("TenantId");

                    b.Property<DateTime?>("UpdateDate");

                    b.Property<int?>("UpdateUserId");

                    b.HasKey("Id");

                    b.ToTable("Asset","Configuration");
                });

            modelBuilder.Entity("Ekklesia.Models.Contact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("BaptismDate");

                    b.Property<DateTime?>("BirthDate");

                    b.Property<string>("CellPhone")
                        .HasMaxLength(30);

                    b.Property<byte[]>("ContactImage")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("ConversionDate");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(15);

                    b.Property<string>("HomePhone")
                        .HasMaxLength(30);

                    b.Property<DateTime>("InsertDate");

                    b.Property<int>("InsertUserId");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsLocalMember");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(15);

                    b.Property<int>("TenantId");

                    b.Property<DateTime?>("UpdateDate");

                    b.Property<int?>("UpdateUserId");

                    b.HasKey("Id");

                    b.ToTable("Contact");
                });

            modelBuilder.Entity("Ekklesia.Models.EntityType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Alias")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("Description")
                        .HasMaxLength(100);

                    b.Property<DateTime>("InsertDate");

                    b.Property<int>("InsertUserId");

                    b.Property<bool>("IsActive");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<DateTime?>("UpdateDate");

                    b.Property<int?>("UpdateUserId");

                    b.HasKey("Id");

                    b.ToTable("EntityType","Configuration");
                });

            modelBuilder.Entity("Ekklesia.Models.MemberMinistryPosition", b =>
                {
                    b.Property<int>("MemberId");

                    b.Property<int>("MinistryId");

                    b.Property<int>("PositionId");

                    b.HasKey("MemberId", "MinistryId", "PositionId");

                    b.HasIndex("MinistryId");

                    b.HasIndex("PositionId");

                    b.ToTable("MemberMinistryPosition");
                });

            modelBuilder.Entity("Ekklesia.Models.Ministry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Alias")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("Description")
                        .HasMaxLength(100);

                    b.Property<DateTime>("InsertDate");

                    b.Property<int>("InsertUserId");

                    b.Property<bool>("IsActive");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<int?>("TenantId");

                    b.Property<DateTime?>("UpdateDate");

                    b.Property<int?>("UpdateUserId");

                    b.HasKey("Id");

                    b.ToTable("Ministry","Configuration");
                });

            modelBuilder.Entity("Ekklesia.Models.Movement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ActivityId");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<DateTime>("InsertDate");

                    b.Property<int>("InsertUserId");

                    b.Property<DateTime>("MovementDate");

                    b.Property<int>("TenantId");

                    b.Property<DateTime?>("UpdateDate");

                    b.Property<int?>("UpdateUserId");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.ToTable("Movement");
                });

            modelBuilder.Entity("Ekklesia.Models.MovementDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AssetId");

                    b.Property<double>("AssetQuantity");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<int?>("ContactId");

                    b.Property<int>("MovementId");

                    b.Property<int>("MovementTypeId");

                    b.HasKey("Id");

                    b.HasIndex("AssetId");

                    b.HasIndex("ContactId");

                    b.HasIndex("MovementId");

                    b.HasIndex("MovementTypeId");

                    b.ToTable("MovementDetail");
                });

            modelBuilder.Entity("Ekklesia.Models.MovementType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Alias")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("Description")
                        .HasMaxLength(100);

                    b.Property<DateTime>("InsertDate");

                    b.Property<int>("InsertUserId");

                    b.Property<bool>("IsActive");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<DateTime?>("UpdateDate");

                    b.Property<int?>("UpdateUserId");

                    b.HasKey("Id");

                    b.ToTable("MovementType","Configuration");
                });

            modelBuilder.Entity("Ekklesia.Models.Position", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Alias")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("Description")
                        .HasMaxLength(100);

                    b.Property<DateTime>("InsertDate");

                    b.Property<int>("InsertUserId");

                    b.Property<bool>("IsActive");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<int?>("TenantId");

                    b.Property<DateTime?>("UpdateDate");

                    b.Property<int?>("UpdateUserId");

                    b.HasKey("Id");

                    b.ToTable("Position","Configuration");
                });

            modelBuilder.Entity("Ekklesia.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Alias")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("Description")
                        .HasMaxLength(100);

                    b.Property<DateTime>("InsertDate");

                    b.Property<int>("InsertUserId");

                    b.Property<bool>("IsActive");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<int?>("TenantId");

                    b.Property<DateTime?>("UpdateDate");

                    b.Property<int?>("UpdateUserId");

                    b.HasKey("Id");

                    b.ToTable("Role","Security");
                });

            modelBuilder.Entity("Ekklesia.Models.Tenant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(100);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.ToTable("Tenant","Security");
                });

            modelBuilder.Entity("Ekklesia.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTime>("InsertDate");

                    b.Property<int>("InsertUserId");

                    b.Property<bool>("MustChangePassword");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<int>("RoleId");

                    b.Property<DateTime?>("UpdateDate");

                    b.Property<int?>("UpdateUserId");

                    b.Property<byte[]>("UserImage");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(15);

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("User","Security");
                });

            modelBuilder.Entity("Ekklesia.Models.UserTenant", b =>
                {
                    b.Property<int>("TenantId");

                    b.Property<int>("UserId");

                    b.HasKey("TenantId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserTenant","Security");
                });

            modelBuilder.Entity("Ekklesia.Models.Activity", b =>
                {
                    b.HasOne("Ekklesia.Models.ActivityType", "ActivityType")
                        .WithMany("Activities")
                        .HasForeignKey("ActivityTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Ekklesia.Models.ActivityAssistant", b =>
                {
                    b.HasOne("Ekklesia.Models.Activity", "Activity")
                        .WithMany("Assistants")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Ekklesia.Models.Contact", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactId");

                    b.HasOne("Ekklesia.Models.EntityType", "EntityType")
                        .WithMany()
                        .HasForeignKey("EntityTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Ekklesia.Models.MemberMinistryPosition", b =>
                {
                    b.HasOne("Ekklesia.Models.Contact", "Member")
                        .WithMany("MinistriesPositions")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Ekklesia.Models.Ministry", "Ministry")
                        .WithMany()
                        .HasForeignKey("MinistryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Ekklesia.Models.Position", "Position")
                        .WithMany()
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Ekklesia.Models.Movement", b =>
                {
                    b.HasOne("Ekklesia.Models.Activity", "Activity")
                        .WithMany()
                        .HasForeignKey("ActivityId");
                });

            modelBuilder.Entity("Ekklesia.Models.MovementDetail", b =>
                {
                    b.HasOne("Ekklesia.Models.Asset", "Asset")
                        .WithMany()
                        .HasForeignKey("AssetId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Ekklesia.Models.Contact", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactId");

                    b.HasOne("Ekklesia.Models.Movement", "Movement")
                        .WithMany()
                        .HasForeignKey("MovementId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Ekklesia.Models.MovementType", "MovementType")
                        .WithMany()
                        .HasForeignKey("MovementTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Ekklesia.Models.User", b =>
                {
                    b.HasOne("Ekklesia.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Ekklesia.Models.UserTenant", b =>
                {
                    b.HasOne("Ekklesia.Models.Tenant", "Tenant")
                        .WithMany("Users")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Ekklesia.Models.User", "User")
                        .WithMany("Tenants")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
